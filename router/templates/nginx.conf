# required to run in a container
daemon off;

user www-data;
worker_processes 4;
pid /run/nginx.pid;

events {
    worker_connections 768;
    # multi_accept on;
}

http {
    {{ $useFirewall := (or .deis_router_firewall "true") }}
    {{ if $useFirewall }}
    # include naxsi rules
    include     /nginx/firewall/naxsi_core.rules;
    include     /nginx/firewall/naxsi_core.rules;
    include     /nginx/firewall/web_apps.rules;
    include     /nginx/firewall/web_server.rules;
    {{ end }}

    # basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_names_hash_bucket_size 64;

    include /nginx/conf/mime.types;
    default_type application/octet-stream;

    client_max_body_size {{ or (.deis_router_bodySize) "1m" }};

    # send logs to STDOUT so they can be seen using 'docker logs'
    access_log /dev/stdout;
    error_log /dev/stdout;

    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    map $http_content_type $customType {
        default html;
        ~application/json json;
    }

    server_name_in_redirect off;
    port_in_redirect off;

    ## start deis-controller
    {{ if .deis_controller_host }}
    upstream deis-controller {
        server {{ .deis_controller_host }}:{{ .deis_controller_port }};
    }

    server {
        server_name ~^deis\.(?<domain>.+)$;

        root /app/errors;
        error_page 403 404 502 503 504  /$status.$customType;

        location / {
            {{ if $useFirewall }}include                     /nginx/firewall/active-mode.rules;{{ end }}
            proxy_buffering             off;
            proxy_set_header            Host $host;
            proxy_set_header            X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_redirect              off;
            proxy_connect_timeout       {{ or (.deis_router_controller_timeout_connect) "10s" }};
            proxy_send_timeout          {{ or (.deis_router_controller_timeout_send) "20m" }};
            proxy_read_timeout          {{ or (.deis_router_controller_timeout_read) "20m" }};

            proxy_pass                  http://deis-controller;
        }

        location /@status.json {
            internal;
        }

        location /@status.html {
            internal;
        }
        {{ if $useFirewall }}
        location /RequestDenied {
            try_files /418.$customType = 418;
        }{{ end }}
    }{{ end }}
    ## end deis-controller

    ## start service definitions for each application
    {{ $domains := .deis_domains }}{{ range $service := .deis_services }}{{ if $service.Nodes }}
    upstream {{ Base $service.Key }} {
        {{ range $upstream := $service.Nodes }}server {{ $upstream.Value }};
        {{ end }}
    }

    server {
        server_name ~^{{ Base $service.Key }}\.(?<domain>.+)${{ range $app_domains := $domains }}{{ if eq (Base $service.Key) (Base $app_domains.Key) }} {{ $app_domains.Value }}{{ end }}{{ end }};

        root /app/errors;
        error_page 403 404 502 503 504  /$status.$customType;

        location / {
            {{ if $useFirewall }}include                     /nginx/firewall/active-mode.rules;{{ end }}
            proxy_buffering             off;
            proxy_set_header            Host $host;
            proxy_set_header            X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_redirect              off;
            proxy_connect_timeout       10s;
            proxy_send_timeout          1200s;
            proxy_read_timeout          1200s;
            proxy_http_version          1.1;
            proxy_set_header            Upgrade $http_upgrade;
            proxy_set_header            Connection $connection_upgrade;

            proxy_next_upstream         error timeout http_502 http_503 http_504;
            add_header                  X-Deis-Upstream $upstream_addr;
            proxy_pass                  http://{{ Base $service.Key }};
        }

        location /@status.json {
            internal;
        }

        location /@status.html {
            internal;
        }
        {{ if $useFirewall }}
        location /RequestDenied {
            try_files /418.$customType = 418;
        }{{ end }}
    }
    {{ end }}{{ end }}
    ## end service definitions for each application

    # healthcheck
    server {
        listen 80 default_server;

        root /app/errors;

        error_page 403 404 502 503 504  /$status.$customType;

        location / {
            try_files /404.$customType = 404;
        }

        location /health-check {
            default_type 'text/plain';
            access_log off;
            return 200;
        }

        location /@status.json {
            internal;
        }

        location /@status.html {
            internal;
        }
        {{ if $useFirewall }}
        location /RequestDenied {
            try_files /418.$customType = 418;
        }{{ end }}
    }
}

## start builder
{{ if .deis_builder_host }}
tcp {
    access_log /dev/stdout;
    tcp_nodelay on;
    timeout {{ or (.deis_router_builder_timeout_tcp) "1200000" }};

    # same directive names, but these are in miliseconds...
    proxy_connect_timeout       {{ or (.deis_router_builder_timeout_connect) "10000" }};
    proxy_send_timeout          {{ or (.deis_router_builder_timeout_send) "1200000" }};
    proxy_read_timeout          {{ or (.deis_router_builder_timeout_read) "1200000" }};

    upstream builder {
        server {{ .deis_builder_host }}:{{ .deis_builder_port }};
    }

    server {
        listen 2222;
        proxy_pass builder;
    }
}{{ end }}
## end builder